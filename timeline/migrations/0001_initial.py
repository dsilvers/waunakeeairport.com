# Generated by Django 3.2.13 on 2022-05-08 22:25

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0066_collection_management_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Event Tag',
                'verbose_name_plural': 'Event Tags',
            },
        ),
        migrations.CreateModel(
            name='PersonTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Person Tag',
                'verbose_name_plural': 'People Tags',
            },
        ),
        migrations.CreateModel(
            name='PublicationTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Publication Tag',
                'verbose_name_plural': 'Publication Tags',
            },
        ),
        migrations.CreateModel(
            name='TaggedEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedPeople',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedPublication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimelinePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateField(blank=True, null=True)),
                ('caption', models.TextField(blank=True, verbose_name='caption')),
                ('body', wagtail.core.fields.RichTextField(blank=True)),
                ('content', wagtail.core.fields.StreamField([('image', wagtail.images.blocks.ImageChooserBlock()), ('YouTube', wagtail.core.blocks.URLBlock()), ('VideoMP4', wagtail.core.blocks.URLBlock())])),
                ('byline', models.CharField(blank=True, max_length=200)),
                ('page_or_edition', models.CharField(blank=True, max_length=200)),
                ('photo_credit', models.CharField(blank=True, max_length=200)),
                ('source_url', models.URLField(blank=True)),
                ('copyright_restricted', models.BooleanField(default=False)),
                ('courtesy_of', models.CharField(blank=True, max_length=200)),
                ('document_text', models.TextField(blank=True)),
                ('events', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='timeline.TaggedEvent', to='timeline.EventTag', verbose_name='Events')),
                ('people', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='timeline.TaggedPeople', to='timeline.PersonTag', verbose_name='People')),
                ('publication', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='timeline.TaggedPublication', to='timeline.PublicationTag', verbose_name='Publication Name')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='taggedpublication',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_publication_items', to='timeline.timelinepage'),
        ),
        migrations.AddField(
            model_name='taggedpublication',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_publications', to='timeline.publicationtag'),
        ),
        migrations.AddField(
            model_name='taggedpeople',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_people_items', to='timeline.timelinepage'),
        ),
        migrations.AddField(
            model_name='taggedpeople',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_people', to='timeline.persontag'),
        ),
        migrations.AddField(
            model_name='taggedevent',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_event_items', to='timeline.timelinepage'),
        ),
        migrations.AddField(
            model_name='taggedevent',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_events', to='timeline.eventtag'),
        ),
    ]
